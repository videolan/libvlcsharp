steps:
- template: base-template.yml
- task: PowerShell@2
  displayName: 'Install gtksharp'
  inputs:
    targetType: 'inline'
    script: |
      $msiFile = "gtk-sharp-2.12.45.msi"
      Invoke-WebRequest "https://github.com/mono/gtk-sharp/releases/download/2.12.45/$msiFile" -OutFile $msiFile
      $arguments = "/i `"$msiFile`" /quiet"
      Start-Process msiexec.exe -ArgumentList $arguments -Wait


- task: PowerShell@2
  displayName: 'Install UWP SDK 19041'
  inputs:
    targetType: 'inline'
    script: |
      function Get-InstalledWindowsSDKRoot {
          $key = "HKLM:\SOFTWARE\Microsoft\Windows Kits\Installed Roots"
          try {
              $vals = Get-ItemProperty -Path $key -ErrorAction Stop
              return $vals.KitsRoot10
          }
          catch {
              return $null
          }
      }

      function Is-SDKInstalled19041 {
          $root = Get-InstalledWindowsSDKRoot
          if (-not $root) {
              return $false
          }
          $candidate = Join-Path $root "Include\10.0.19041.0"
          return (Test-Path $candidate)
      }

      function Download-SDKInstaller {
          param (
              [string] $DestinationPath
          )
          # Microsoft fwlink for Windows 10 SDK, version 2004 (10.0.19041.685)
          $uri = "https://go.microsoft.com/fwlink/?linkid=2120843"
          Write-Host "Downloading Windows SDK 10.0.19041 from $uri..."
          try {
              Invoke-WebRequest -Uri $uri -OutFile $DestinationPath -UseBasicParsing
              return $true
          }
          catch {
              Write-Error "Download failed: $_"
              return $false
          }
      }

      function Install-SDK {
          param (
              [string] $InstallerPath
          )
          Write-Host "Installing Windows SDK 10.0.19041 silently..."
          Write-Host "Running: $InstallerPath /features + /quiet /norestart"

          # Try multiple installation approaches
          $installArgs = @(
              @("/features", "+", "/quiet", "/norestart"),
              @("/quiet", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit"),
              @("/S", "/v/qn")
          )

          foreach ($args in $installArgs) {
              Write-Host "Trying: $InstallerPath $($args -join ' ')"
              try {
                  $process = Start-Process -FilePath $InstallerPath -ArgumentList $args -Wait -PassThru -NoNewWindow
                  Write-Host "Exit code: $($process.ExitCode)"

                  if ($process.ExitCode -eq 0 -or $process.ExitCode -eq 3010) {
                      Write-Host "SDK installed successfully." -ForegroundColor Green
                      return
                  } elseif ($process.ExitCode -eq 1001) {
                      Write-Warning "Exit code 1001: Another installation in progress or installer conflict"
                      continue
                  } else {
                      Write-Warning "Attempt failed with exit code: $($process.ExitCode)"
                      continue
                  }
              } catch {
                  Write-Warning "Attempt failed with exception: $($_.Exception.Message)"
                  continue
              }
          }

          # If all attempts failed, check if SDK got installed anyway
          if (Is-SDKInstalled19041) {
              Write-Host "SDK appears to be installed despite installation errors." -ForegroundColor Yellow
              return
          }

          Write-Error "All SDK installation attempts failed"
          exit 1
      }

      # Main execution
      if (-not (Is-SDKInstalled19041)) {
          $tempInstaller = Join-Path $env:TEMP "winsdk_19041_setup.exe"

          if (-not (Download-SDKInstaller -DestinationPath $tempInstaller)) {
              throw "Failed to download Windows SDK 19041 installer."
          }

          Install-SDK -InstallerPath $tempInstaller

          # Clean up
          Remove-Item -Path $tempInstaller -ErrorAction SilentlyContinue
      }
      else {
          Write-Host "Windows SDK 10.0.19041 already installed."
      }

      # Verify SDK installation and set environment variables
      Write-Host "Verifying SDK installation..."
      $sdkRoot = Get-InstalledWindowsSDKRoot
      if ($sdkRoot) {
          Write-Host "Windows SDK Root: $sdkRoot"
          $sdkIncludePath = Join-Path $sdkRoot "Include\10.0.19041.0"
          $sdkLibPath = Join-Path $sdkRoot "Lib\10.0.19041.0"

          if (Test-Path $sdkIncludePath) {
              Write-Host "SDK Include path exists: $sdkIncludePath"
              $dirs = Get-ChildItem -Path $sdkIncludePath -Directory | Select-Object -ExpandProperty Name
              Write-Host "Available SDK components: $($dirs -join ', ')"
          } else {
              Write-Error "SDK Include path not found: $sdkIncludePath"
          }

          if (Test-Path $sdkLibPath) {
              Write-Host "SDK Lib path exists: $sdkLibPath"
          } else {
              Write-Error "SDK Lib path not found: $sdkLibPath"
          }

          # Set environment variables for this agent session
          Write-Host "##vso[task.setvariable variable=WindowsSdkDir]$sdkRoot"
          Write-Host "##vso[task.setvariable variable=WindowsSDKVersion]10.0.19041.0\"
      } else {
          Write-Error "Could not find Windows SDK installation root"
          exit 1
      }

- task: JavaToolInstaller@0
  displayName: 'Setup Java 17'
  inputs:
    versionSpec: '17'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'

- task: PowerShell@2
  displayName: 'Install Android SDK Platforms'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "ANDROID_HOME: $env:ANDROID_HOME"
      Write-Host "ANDROID_SDK_ROOT: $env:ANDROID_SDK_ROOT"

      # Find sdkmanager
      $sdkManagerPaths = @(
        "$env:ANDROID_HOME\cmdline-tools\latest\bin\sdkmanager.bat",
        "$env:ANDROID_HOME\tools\bin\sdkmanager.bat",
        "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin\sdkmanager.bat",
        "$env:ANDROID_SDK_ROOT\tools\bin\sdkmanager.bat"
      )

      $sdkManager = $null
      foreach ($path in $sdkManagerPaths) {
        if (Test-Path $path) {
          $sdkManager = $path
          Write-Host "Found sdkmanager at: $path"
          break
        }
      }

      if (-not $sdkManager) {
        Write-Error "Could not find sdkmanager at any expected location"
        Write-Host "Checked paths: $($sdkManagerPaths -join ', ')"
        exit 1
      }

      # Check Java version
      Write-Host "Checking Java version..."
      try {
        $javaVersion = java -version 2>&1 | Select-String "version" | ForEach-Object { $_.ToString() }
        Write-Host "Java version: $javaVersion"
      } catch {
        Write-Warning "Could not determine Java version: $($_.Exception.Message)"
      }

      # Accept licenses and install platforms
      Write-Host "Accepting Android SDK licenses..."
      echo y | & $sdkManager --licenses

      Write-Host "Installing Android API 27..."
      echo y | & $sdkManager "platforms;android-27"
      if ($LASTEXITCODE -ne 0) {
        Write-Warning "Failed to install Android API 27 (exit code: $LASTEXITCODE)"
      }

      Write-Host "Installing Android API 28..."
      echo y | & $sdkManager "platforms;android-28"
      if ($LASTEXITCODE -ne 0) {
        Write-Warning "Failed to install Android API 28 (exit code: $LASTEXITCODE)"
      }

      # Verify installations
      $platforms = & $sdkManager --list | Select-String "platforms;android-"
      Write-Host "Available platforms after installation:"
      Write-Host $platforms

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: custom
    custom: 'cake'
    workingDirectory: buildsystem

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: 'nugets'
    artifactName: 'nugets'