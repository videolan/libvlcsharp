trigger:
- master
- 3.x

pr:
- master
- 3.x

stages:
- stage: Build
  variables:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true
  jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: linux-build.yml

  - job: macOS
    pool:
      vmImage: 'macOS-latest'
    steps:
    - template: mac-build.yml

  - job: Windows
    timeoutInMinutes: 120
    pool:
      vmImage: 'windows-latest'
    steps:
    - template: windows-build.yml

- stage: Test
  dependsOn: Build
  condition: succeeded('Build')
  variables:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true

  jobs:
    - job: test
      pool:
        vmImage: 'windows-latest'
      steps:
        - template: base-template.yml
        - task: DotNetCoreCLI@2
          displayName: 'Test'
          inputs:
            command: custom
            custom: 'cake'
            arguments: --target Test
            workingDirectory: buildsystem

- stage: Deploy
  dependsOn: Test
  condition: |
      and(
        eq(variables['Build.Repository.Name'], 'videolan/libvlcsharp'),
        succeeded('Test'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          eq(variables['Build.SourceBranch'], 'refs/heads/3.x')
        ),
        ne(variables['Build.Reason'], 'PullRequest'),
        ne(variables['Build.Reason'], 'Manual')
      )
  jobs:
  - job: feedz
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: base-template.yml
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          artifactName: 'nugets'
          itemPattern: '**/*.nupkg'
          downloadPath: $(Build.Repository.LocalPath)
      - task: DotNetCoreCLI@2
        displayName: 'Build'
        env:
          FEEDZ: $(FEEDZ)
        inputs:
          command: custom
          custom: 'cake'
          arguments: --target CIDeploy
          workingDirectory: buildsystem